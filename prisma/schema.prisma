// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String      @id @default(uuid())
  first_name          String
  last_name           String?
  email               String      @unique
  password            String
  contact_number      String?
  profile_pic         String?
  status              UserStatus  @default(ACTIVE)
  role                UserRole    @default(USER)
  is_deleted          Boolean     @default(false)
  password_changed_at DateTime    @default(now())
  created_at          DateTime    @default(now())
  updated_at          DateTime    @updatedAt
  Campaign            Campaign[]
  File                File[]
  Portfolio           Portfolio[]
  ThreadParticipant   ThreadParticipant[]
  Message             Message[]

  @@map("users")
}

model Records {
  id                             String        @id @default(uuid())
  title                          String
  campaign                       String?
  product                        String?
  stakeholder                    String?
  posting_quality                String?
  google_drive_files             String?
  playbook_link                  String?
  uppromote_conversion           Int           @default(0)
  asset_status                   String?
  month_uploaded                 DateTime?
  REVO_pinterest                 String?       @default("not-posted")
  pin_accounts_used              String?       @default("not-posted")
  pinterest_PIN_click            Int           @default(0)
  pinterest_view                 Int           @default(0)
  REVO_instagram                 String?
  IG_like                        Int           @default(0)
  IG_comment                     Int           @default(0)
  IG_share                       Int           @default(0)
  IG_view                        Int           @default(0)
  IG_social_sets_used            String?
  partner_IG_link                String?
  REVO_twitter                   String?       @default("not-posted")
  REVO_tiktok                    String?       @default("not-posted")
  REVO_TT_view                   Int           @default(0)
  tiktok_accounts_used           String?       @default("not-posted")
  partner_tiktok_link            String?       @default("not-posted")
  partner_TT_like                Int           @default(0)
  partner_TT_comments            Int           @default(0)
  partner_TT_comment             String?
  partner_TT_share               Int           @default(0)
  partner_TT_view                Int           @default(0)
  partner_TT_save                Int           @default(0)
  TT_dummy_account_used          String?
  YT_account_used                String?       @default("not-posted")
  partner_YT_link                String?       @default("not-posted")
  partner_YT_like                Int           @default(0)
  partner_YT_comment             Int           @default(0)
  partner_YT_view                Int           @default(0)
  partner_YT_save                Int           @default(0)
  REVO_clubrevo_youtube          String?       @default("not-posted")
  REVO_youtube                   String?       @default("not-posted")
  YT_clubrevo_like               Int           @default(0)
  YT_clubrevo_view               Int           @default(0)
  YT_REVOMADIC_like              Int           @default(0)
  YT_REVOMADIC_comment           Int           @default(0)
  YT_REVOMADIC_share             Int           @default(0)
  YT_REVOMADIC_view              Int           @default(0)
  creator_status                 String?
  profile                        String?
  posting_status                 PostingStatus @default(NOT_POSTED)
  partner_hq                     String?
  portfolio                      String?
  contributed_engagement         Int           @default(0)
  by_tags                        String?
  by_city                        String?
  AI_internet_search             String?
  facilities_contributed_content String?
  image                          String?
  video                          String?
  created_at                     DateTime      @default(now())
  updated_at                     DateTime      @updatedAt

  @@map("records")
}

model Campaign {
  id                   String         @id @default(uuid())
  name                 String
  slug                 String
  description          String?
  start_date           DateTime?
  end_date             DateTime?
  status               CampaignStatus
  thumbnail            String?
  stakeholder          String?
  goal                 String?
  partner_compensation Int            @default(0)
  partner_deliverables String?
  contributed_partners String?
  prospected_partners  String?
  content_HQ           String?
  content_guidelines   String?
  image_inspiration    String?
  video_inspiration    String?
  content_engagement   Int            @default(0)
  product_expense      Int            @default(0)
  partner_expense      Int            @default(0)
  social_platforms     Json?
  featured             Boolean        @default(false)
  user_id              String
  created_at           DateTime       @default(now())
  updated_at           DateTime       @updatedAt

  created_by User @relation(fields: [user_id], references: [id])

  @@map("campaigns")
}

model File {
  id         String   @id @default(uuid())
  name       String
  alt_text   String
  type       String
  size       Int
  width      Int
  height     Int
  path       String
  bucket_id  String
  user_id    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  uploaded_by User @relation(fields: [user_id], references: [id])

  @@map("files")
}

model OTP {
  id         String   @id @default(uuid())
  email      String
  otp        Int      @unique
  expires_at String
  created_at DateTime @default(now())

  @@map("otp")
}

model Portfolio {
  id                                  String          @id @default(uuid())
  name                                String
  slug                                String
  description                         String?
  type                                PortfolioTypes
  model                               String?
  days_location                       String?
  sessions                            String?
  producer                            String?
  production_studio                   String?
  location                            String?
  talent                              String?
  creation_10_images_services_provide String?
  brand                               String?
  deliverables                        String?
  status                              PortfolioStatus
  thumbnail                           String?
  image_inspiration                   String?
  video_inspiration                   String?
  user_id                             String
  created_at                          DateTime        @default(now())
  updated_at                          DateTime        @updatedAt

  created_by User @relation(fields: [user_id], references: [id])

  @@map("portfolios")
}
model Thread {
  id           String              @id @default(uuid())
  type         ThreadType          @default(DIRECT)
  name         String?             // Optional name for the thread
  member_count Int                 @default(0) // Member count for the thread
  unread_count Int                 @default(0) 
  created_at   DateTime            @default(now())
  updated_at   DateTime            @updatedAt
  participants ThreadParticipant[]
  messages     Message[]

  @@map("threads")
}

model ThreadParticipant {
  id        String @id @default(uuid())
  thread_id String
  user_id   String

  thread Thread @relation(fields: [thread_id], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [user_id], references: [email], onDelete: Cascade)

  @@unique([thread_id, user_id])
  @@map("thread_participants")
}

model Message {
  id                String      @id @default(uuid())
  thread_id         String
  author_id         String
  type              MessageType @default(TEXT)
  content           String?
  file_url          String?
  parent_message_id String?    
  read_status       Boolean     @default(false)
  is_edited         Boolean     @default(false) 
  created_at        DateTime    @default(now())
  updated_at        DateTime    @updatedAt

  thread Thread @relation(fields: [thread_id], references: [id], onDelete: Cascade)
  author User   @relation(fields: [author_id], references: [email])
  parent Message? @relation("MessageToParent",fields: [parent_message_id], references: [id])
  children Message[] @relation("MessageToParent")

  @@map("messages")
}

enum ThreadType {
  DIRECT
  GROUP
}

enum MessageType {
  TEXT
  FILE
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

enum PostingStatus {
  POSTED
  NOT_POSTED
}

enum CampaignStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum PortfolioTypes {
  VLOGS
  ECOMMERCE
  FASHION
  BRANDING
  UGC
  MUSIC
  BW
  CREATORS
  BEAUTY
  PUBLICATIONS
  SPORT
  PORDUCTS
  SWIM
  COMMERCIAL
  LIFESTYLE
  PORTRAITURE
  FILM
  EVENTS
  MOOD
  HOME
}

enum PortfolioStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}
